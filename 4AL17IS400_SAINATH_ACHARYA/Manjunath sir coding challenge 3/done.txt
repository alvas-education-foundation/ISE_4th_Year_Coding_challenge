1.There's a staircase with N steps, and you can climb 1 or 2 steps at a time. 
Given N, write a function that returns the number of unique ways you can climb the staircase. 
The order of the steps matters.

def fib(n): 
    if n <= 1: 
        return n 
    return fib(n-1) + fib(n-2) 
  

def countWays(s): 
    return fib(s + 1) 
  
s = 4
print ("Number of ways = ") 
print (countWays(s)) 

---------------------------------------------------------------------------------------
2.. How do you check if two rectangles overlap with each other

class Point: 
    def __init__(self, x, y): 
        self.x = x 
        self.y = y    
def doOverlap(l1, r1, l2, r2): 
      
    if(l1.x >= r2.x or l2.x >= r1.x): 
        return False
    if(l1.y <= r2.y or l2.y <= r1.y): 
        return False
  
    return True

if __name__ == "__main__": 
    l1 = Point(0, 10) 
    r1 = Point(10, 0) 
    l2 = Point(5, 5) 
    r2 = Point(15, 0) 
  
    if(doOverlap(l1, r1, l2, r2)): 
        print("Rectangles Overlap") 
    else: 
        print("Rectangles Don't Overlap") 
  

------------------------------------------------------------------------------------
3.How to Find Missing Number on Integer Array of 1 to 100

import java.util.Arrays;
import java.util.BitSet;
public class MissingNumberInArray
{
 
    public static void main(String args[])
  {

        printMissingNumber(new int[]{1, 2, 3, 4, 6}, 6);
        printMissingNumber(new int[]{1, 2, 3, 4, 6, 7, 9, 8, 10}, 10);
        printMissingNumber(new int[]{1, 2, 3, 4, 6, 9, 8}, 10);
        printMissingNumber(new int[]{1, 2, 3, 4, 9, 8}, 10);
        int[] iArray = new int[]{1, 2, 3, 5};
        int missing = getMissingNumber(iArray, 5);
        System.out.printf("Missing number in array %s is %d %n", 
                           Arrays.toString(iArray), missing);
    }
    private static void printMissingNumber(int[] numbers, int count)
   {
        int missingCount = count - numbers.length;
        BitSet bitSet = new BitSet(count);
        for (int number : numbers)
       {
            bitSet.set(number - 1);
        }
 
        System.out.printf("Missing numbers in integer array %s, with total number %d is %n",
        Arrays.toString(numbers), count);
        int lastMissingIndex = 0;

        for (int i = 0; i < missingCount; i++) {
            lastMissingIndex = bitSet.nextClearBit(lastMissingIndex);
            System.out.println(++lastMissingIndex);
        }
 
    }
    private static int getMissingNumber(int[] numbers, int totalCount)
   {
        int expectedSum = totalCount * ((totalCount + 1) / 2);
        int actualSum = 0;
        for (int i : numbers)
       {
            actualSum += i;
        }
 
        return expectedSum - actualSum;
    }
 
}
