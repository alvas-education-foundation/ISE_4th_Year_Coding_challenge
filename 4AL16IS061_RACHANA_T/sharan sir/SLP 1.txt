1) 
import java.io.*; 
import java.util.Scanner; 
class Armstrong{  
  public static void main(String[] args)  {
Scanner s = new Scanner(System.in);  
    int c=0,a,temp;  
    int n=s.nextInt();  
    temp=n;  
    while(n>0)  
    {  
    a=n%10;  
    n=n/10;  
    c=c+(a*a*a);  
    }  
    if(temp==c)  
    System.out.println("true");   
    else  
        System.out.println("no");   
   }  
}  

2)
import java.util.*;
import java.util.Scanner;
public class Main {
 static final int NOOFCHARS = 256;
 static char get2ndMostFreq(String str) {

  int[] ctr = new int[NOOFCHARS];
  int i;
  for (i = 0; i < str.length(); i++)
   (ctr[str1.charAt(i)]) ++;

  int ctr_first = 0, ctr_second = 0;
  for (i = 0; i < NOOFCHARS; i++) {
   if (ctr[i] > ctr[ctr_first]) {
    ctr_second = ctr_first;
    ctr_first = i;
   } else if (ctr[i] > ctr[ctr_second] && ctr[i] != ctr[ctr_first])
    ctr_second = i;
  }
  return (char) ctr_second;
 }
 public static void main(String args[]) {
  Scanner s = new Scanner();
  String str =s.nextLine();
  System.out.println("The given string is: " + str1);
  char res = get2ndMostFreq(str1);
  if (res != '\0')
   System.out.println("The second most frequent char in the string is: " + res);
  else
   System.out.println("No second most frequent character found in the string.");
 }
}


3)
import java.util.HashSet;
public class Exercise34 {    
   public static void main(String[] args) {
        int nums[] = {49, 1, 3, 200, 2, 4, 70, 5};  
		System.out.println("Original array length: "+nums.length);
		System.out.print("Array elements are: ");
       for (int i = 0; i < nums.length; i++)
        {
            System.out.print(nums[i]+" ");
        }
		System.out.println("\nThe new length of the array is: "+longest_sequence(nums));
			
    }
    
    public static int longest_sequence(int[] nums) {
      final HashSet<Integer> h_set = new HashSet<Integer>();
        for (int i : nums) h_set.add(i);

        int longest_sequence_len = 0;
        for (int i : nums) {
            int length = 1;
            for (int j = i - 1; h_set.contains(j); --j) {
                h_set.remove(j);
                ++length;
            }
            for (int j = i + 1; h_set.contains(j); ++j) {
                h_set.remove(j);
                ++length;
            }
            longest_sequence_len = Math.max(longest_sequence_len, length);
        }
        return longest_sequence_len;
    }
}


4)
public class ArraySegregate
{
    public static void main(String[] a)
    {
        int array[] = { 0, 1, 0, 1, 1, 0 };
        segregate0and1(array, 6);
        for(int i = 0 ; i < 6; i++)
        {
            System.out.print(array[i]+"\t");
        }
    }
    static void segregate0and1(int array[], int size)
    {
        int left = 0, right = size-1;
    	while (left < right)
    	{
            while (array[left] == 0 && left < right)
            left++;
           
            while (array[right] == 1 && left < right)
            right--;
           
            if (left < right)
            {
                array[left] = 0;
                array[right] = 1;
                left++;
                right--;
            }
        }
    }
}