1).Kevin and Stuart want to play the 'The Minion Game'.

Game Rules

Both players are given the same string S .
Both players have to make substrings using the letters of the string S.
Stuart has to make words starting with consonants.
Kevin has to make words starting with vowels.
The game ends when both players have made all possible substrings.

Scoring
A player gets +1 point for each occurrence of the substring in the string S .


def minion_game(string):
    # your code goes here

    V = frozenset("AEIOU")
    n = len(s)
    ksc = sum(q for c, q in zip(s, range(n, 0, -1)) if c in V)
    ssc = n * (n + 1) // 2 - ksc
    if ksc > ssc:
        print("Kevin {:d}".format(ksc))
    elif ssc > ksc:
        print("Stuart {:d}".format(ssc))
    else:
        print("Draw")
if __name__ == '__main__':
    s = input()
    minion_game(s)

Input (stdin)

BANANA
 Output

Stuart 12



2).You are given a spreadsheet that contains a list of N athletes and their details (such as age, height, weight and so on). You are required to sort the data based on the  Kth attribute and print the final resulting table. Follow the example given below for better understanding.

n,m = map(int,raw_input().split())
lst = []
for i in range(n):
    lst.append(map(int,raw_input().split()))
k = int(raw_input())    
print "\n".join(map(lambda x: " ".join(map(str, x)), sorted(lst, key = lambda x: x[k]))) 

Input (stdin)
Download
5 3
10 2 5
7 1 0
9 9 9
1 23 12
6 5 9
1
Your Output (stdout)
7 1 0
10 2 5
6 5 9
9 9 9
1 23 12
Expected Output
Download
7 1 0
10 2 5
6 5 9
9 9 9
1 23 12


3). A deque is a double-ended queue. It can be used to add or remove elements from both ends.

Deques support thread safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.

Click on the link to learn more about deque() methods.
Click on the link to learn more about various approaches to working with deques: Deque Recipes.

from collections import deque
d = deque()
for i in xrange(input()):
    k = raw_input().split()
    if k[0] == 'append':
        d.append(int(k[1]))
    elif k[0] == 'pop':
        d.pop()
    elif k[0] == 'popleft':
        d.popleft()
    elif k[0] == 'appendleft':
        d.appendleft(int(k[1]))
print ' '.join(map(str,d))


Input (stdin)
Download
6
append 1
append 2
append 3
appendleft 4
pop
popleft
Your Output (stdout)
1 2
Expected Output
Download
1 2

4). The itertools module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an iterator algebra making it possible to construct specialized tools succinctly and efficiently in pure Python.

from itertools import *
N = input()
st = raw_input().split()
K = input()
ind = list()
com = list(combinations(range(1,N+1),K))
for i,g in enumerate(st):
    if g == 'a':
         ind.append(i+1) 
count = 0
print float(len(set([y for x in ind for y in com if x in y ])))/len(com)

Input (stdin)
Download
4
a a c d
2
Your Output (stdout)
0.833333333333
Expected Output
Download
0.833333333333


5) program to check Armstrong Number

class ArmstrongExample{  
  public static void main(String[] args)  {  
    int c=0,a,temp;  
    int n=153;//It is the number to check armstrong  
    temp=n;  
    while(n>0)  
    {  
    a=n%10;  
    n=n/10;  
    c=c+(a*a*a);  
    }  
    if(temp==c)  
    System.out.println("armstrong number");   
    else  
        System.out.println("Not armstrong number");   
   }  
}  