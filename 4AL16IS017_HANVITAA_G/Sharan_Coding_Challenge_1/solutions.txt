1]

import java.util.*;
public class solution 
{	
     public static boolean is_Amstrong(int n) 
    {
        int remainder, sum = 0, temp = 0;
        temp = n;
        while (n > 0) 
       {
            remainder = n % 10;
            sum = sum + (remainder * remainder * remainder);
            n = n / 10;
        }
        return sum == temp;
    }  

   public static void main(String[] args) 
  {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Input an integer: ");
		String input = scanner.nextLine();
		int number = Integer.parseInt(input); 
		System.out.println("Is Armstrong number? "+is_Amstrong(number));		
    }
}


2]

import java.util.*;
public class Main {
 static final int NOOFCHARS = 256;
 static char get2ndMostFreq(String str1) {

  int[] ctr = new int[NOOFCHARS];
  int i;
  for (i = 0; i < str1.length(); i++)
   (ctr[str1.charAt(i)]) ++;

  int ctr_first = 0, ctr_second = 0;
  for (i = 0; i < NOOFCHARS; i++) 
  {
      if (ctr[i] > ctr[ctr_first]) 
     {
         ctr_second = ctr_first;
         ctr_first = i;
      } 
      else if (ctr[i] > ctr[ctr_second] && ctr[i] != ctr[ctr_first])
      ctr_second = i;
   }
  return (char) ctr_second;
 }

 public static void main(String args[]) {
  String str1 = "successes";
  System.out.println("The given string is: " + str1);
  char res = get2ndMostFreq(str1);
  if (res != '\0')
   System.out.println("The second most frequent char in the string is: " + res);
  else
   System.out.println("No second most frequent character found in the string.");
 }
}

3]

import java.util.HashSet;
public class  p1{    
   public static void main(String[] args) 
  {
        int nums[] = {49, 1, 3, 200, 2, 4, 70, 5};  
		System.out.println("Original array length: "+nums.length);
		System.out.print("Array elements are: ");
       for (int i = 0; i < nums.length; i++)
        {
            System.out.print(nums[i]+" ");
        }
		System.out.println("\nThe new length of the array is: "+longest_sequence(nums));
			
    }
    public static int longest_sequence(int[] nums) 
   {
      final HashSet<Integer> h_set = new HashSet<Integer>();
        for (int i : nums) h_set.add(i);
        int longest_sequence_len = 0;
        for (int i : nums) 
       {
            int length = 1;
            for (int j = i - 1; h_set.contains(j); --j) 
           {
                h_set.remove(j);
                ++length;
            }
            for (int j = i + 1; h_set.contains(j); ++j)
           {
                h_set.remove(j);
                ++length;
            }
            longest_sequence_len = Math.max(longest_sequence_len, length);
        }
        return longest_sequence_len;
    }
}

4]

import java.util.*;
import java.lang.*;
public class Main
{
   public static void main (String[] args) 
    {  
        int nums[] = {0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1};
        int i,  nums_size = nums.length;
        int left = 0, right = nums_size - 1;
        System.out.println("Simple Array : "+Arrays.toString(nums));  
        while (left < right) 
        {
            while (nums[left] == 0 && left < right)
               left++;
            while (nums[right] == 1 && left < right)
                right--;
           
            if (left < right) 
            {
                nums[left] = 0;
                nums[right] = 1;
                left++;
                right--;
            }
        }
        
       System.out.println("output after segregation : "+Arrays.toString(nums));  
    }
}