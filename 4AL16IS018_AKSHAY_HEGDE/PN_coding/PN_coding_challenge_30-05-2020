1)	Write a Java program to find the index of an array element.

Solutions:

import java.util.*; 
public class index { 

	public static int findIndex(int arr[], int t) 
	{ 

		if (arr == null) { 
			return -1; 
		} 
		int len = arr.length; 
		int i = 0; 

		while (i < len) { 
			if (arr[i] == t) { 
				return i; 
			} 
			else { 
				i = i + 1; 
			} 
		} 
		return -1; 
	} 
	public static void main(String[] args) 
	{ 
		int[] my_array = { 5, 4, 6, 1, 3, 2, 7, 8, 9 }; 
 
		System.out.println("Index position of 5 is: "
						+ findIndex(my_array, 5)); 

		System.out.println("Index position of 7 is: "
						+ findIndex(my_array, 7)); 
	} 
} 


2)	Write a Java program to find the duplicate values of an array of integer values.
Solutions: 

class RepeatElement  
{ 
    void printRepeating(int arr[], int size)  
    { 
        int i, j; 
        System.out.println("Repeated Elements are :"); 
        for (i = 0; i < size; i++)  
        { 
            for (j = i + 1; j < size; j++)  
            { 
                if (arr[i] == arr[j])  
                    System.out.print(arr[i] + " "); 
            } 
        } 
    } 
  
    public static void main(String[] args)  
    { 
        RepeatElement repeat = new RepeatElement(); 
        int arr[] = {4, 2, 4, 5, 2, 3, 1}; 
        int arr_size = arr.length; 
        repeat.printRepeating(arr, arr_size); 
    } 
} 

3)	Write a Java program to get a date before and after 1 year compares to the current date.
Solutions: 

// Java program to compare dates in Java 

import java.util.Date; 
import java.text.ParseException; 
import java.text.SimpleDateFormat; 

public class TestDate { 
	public static void main(String args[]) 
		throws ParseException 
	{ 

		SimpleDateFormat 
			sdfo 
			= new SimpleDateFormat("yyyy-MM-dd"); 
 
		Date d1 = sdfo.parse("2018-03-31"); 
		Date d2 = sdfo.parse("2012-03-31"); 

		System.out.println("Date1 : " + sdfo.format(d1)); 
		System.out.println("Date2 : " + sdfo.format(d2)); 
 
		if (d1.compareTo(d2) > 0) { 

			System.out.println("Date1 is after Date2"); 
		} 

		else if (d1.compareTo(d2) < 0) { 
 
			System.out.println("Date1 is before Date2"); 
		} 

		else if (d1.compareTo(d2) == 0) { 

			System.out.println("Date1 is equal to Date2"); 
		} 
	} 
} 


4)	Solve the challenge where,
You are given a  2D array. An hourglass in an array is a portion shaped like this:
a b c
  d
e f g
For example, if we create an hourglass using the number 1 within an array full of zeros, it may look like this:
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
Actually, there are many hourglasses in the array above. The three leftmost hourglasses are the following:
1 1 1     1 1 0     1 0 0
  1         0         0
1 1 1     1 1 0     1 0 0
The sum of an hourglass is the sum of all the numbers within it. The sum for the hourglasses above are 7, 4, and 2, respectively.
In this problem you have to print the largest sum among all the hourglasses in the array.
Input Format
There will be exactly  lines, each containing  integers separated by spaces. Each integer will be between  and  inclusive.
Output Format
Print the answer to this problem on a single line.
Sample Input
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
Solutions: 

import java.io.*; 

class GFG { 
	
static int R = 5; 
static int C = 5; 
static int findMaxSum(int [][]mat) 
{ 
	if (R < 3 || C < 3) 
		return -1;  
	int max_sum = Integer.MIN_VALUE; 
	for (int i = 0; i < R - 2; i++) 
	{ 
		for (int j = 0; j < C - 2; j++) 
		{ 

			int sum = (mat[i][j] + mat[i][j + 1] + mat[i][j + 2]) + (mat[i + 1][j + 1]) + 
					(mat[i + 2][j] + mat[i + 2][j + 1] + mat[i + 2][j + 2]); 
			max_sum = Math.max(max_sum, sum); 
		} 
	} 
	return max_sum; 
} 
	static public void main (String[] args) 
	{ 
		int [][]mat = {{1, 2, 3, 0, 0}, 
					{0, 0, 0, 0, 0}, 
					{2, 1, 4, 0, 0}, 
					{0, 0, 0, 0, 0}, 
					{1, 1, 0, 1, 0}}; 
		int res = findMaxSum(mat); 
		if (res == -1) 
			System.out.println("Not possible"); 
		else
			System.out.println("Maximum sum of hour glass = "
								+ res); 
	} 
	
} 
