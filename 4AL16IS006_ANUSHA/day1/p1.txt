mplement a C program to find whether a given Binary Search Tree is height balanced.

 

Hint:

A tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of “much farther” and different amounts of work to keep them balanced.

 

Consider a height-balancing scheme where following conditions should be checked to determine if a binary tree is balanced.

An empty tree is height-balanced. A non-empty binary tree T is balanced if:

1) Left subtree of T is balanced

2) Right subtree of T is balanced

3) The difference between heights of left subtree and right subtree is not more than 1.]

 

Input and Output Format:

Refer Sample Input and Output for formatting specifications.

 

[All text in bold corresponds to input and the rest corresponds to output]



Sample Input and Output 1:

Enter the element to be inserted in the tree

5

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

3

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

2

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

10

Do you want to insert another element?

no

The elements in the tree are 2 3 5 10

The tree is height balanced

 

 

Sample Input and Output 2:

Enter the element to be inserted in the tree

5

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

3

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

2

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

1

Do you want to insert another element?

yes

Enter the element to be inserted in the tree

10

Do you want to insert another element?

no

The elements in the tree are 1 2 3 5 10

The tree is not height balanced
#include<stdio.h>

#include<stdlib.h>

#include<string.h>

struct tnode
{
	
int data;
	
struct tnode * leftc;
	
struct tnode * rightc;

};


void insert(struct tnode **, int num);

void inorder(struct tnode *);

int height(struct tnode* node);

int isBalanced(struct tnode *root);

int max(int a, int b);


int main()
{
	
struct tnode * root=NULL;
	
char ch[5];
	int num;
	
do
	{
		
printf("Enter the element to be inserted in the tree\n");
	
	scanf("%d",&num);
		
insert(&root, num);
		
printf("Do you want to insert another element?\n");
		
scanf("%s",ch);
	}while(strcmp(ch,"yes")==0);

	
printf("The elements in the tree are");
	inorder(root);
	printf("\n");
	
if(isBalanced(root))
		
printf("The tree is height balanced\n");
	
else
		
printf("The tree is not height balanced\n");
	
return 0;
}


void insert(struct tnode ** s, int num)

{

if((*s) == NULL)

{
(*s) = (struct tnode *) malloc( sizeof (struct tnode));

(*s)->data = num;

(*s)->leftc = NULL;

(*s)->rightc = NULL;
}

else
{
if(num < (*s)->data)
 
 insert(&( (*s)->leftc ), num);

else
 
 insert(&( (*s)->rightc ), num);
}
}


void inorder(struct tnode * s)
{
	if(s==NULL)

	    return;
	
inorder(s->leftc);

	printf("%d",s->data);
	
inorder(s->rightc);
}


int isBalanced(struct tnode *root)
{
    int lh,rh;
   
 if(root==NULL)
       
 return 1;
   
 lh=height(root->leftc);
    
rh=height(root->rightc);
   
 if(abs(lh-rh)<=1 && isBalanced(root->leftc) && isBalanced(root->rightc))
       
 return 1;
   
 return 0;
}
int height(struct tnode* node)
{
    int lh,rh;

if(node==NULL)
    return 0;

else
{
    lh=height(node->leftc);
  
  rh=height(node->rightc);
  
  if(lh>rh)
        
	return(lh+1);
    
else
        
return(rh+1);
}
}
 

int max(int a, int b)
{
  
return (a >= b)? a: b;
}