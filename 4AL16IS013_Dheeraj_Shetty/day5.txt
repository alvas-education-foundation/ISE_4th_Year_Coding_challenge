Question 1)

Find distance between two nodes in the given Binary tree for Q queries
Given a binary tree having N nodes and weight of N-1 edges. The distance between two nodes is the sum of the weight of edges on the path between two nodes. Each query contains two integers U and V, the task is to find the distance between node U and V.

Solution :-

#include <bits/stdc++.h> 
using namespace std; 
  
#define MAX 1000 
  
#define log 10 // log2(MAX) 
  
int level[MAX]; 
  
int lca[MAX][log]; 
int dist[MAX][log]; 
 
vector<pair<int, int> > graph[MAX]; 
  
void addEdge(int u, int v, int cost) 
{ 
    graph[u].push_back({ v, cost }); 
    graph[v].push_back({ u, cost }); 
} 
  

void dfs(int node, int parent, 
         int h, int cost) 
{ 
    
    lca[node][0] = parent; 
  
    level[node] = h; 
    if (parent != -1) { 
        dist[node][0] = cost; 
    } 
  
    for (int i = 1; i < log; i++) { 
        if (lca[node][i - 1] != -1) { 
  
            lca[node][i] 
                = lca[lca[node] 
                         [i - 1]] 
                     [i - 1]; 
  
            dist[node][i] 
                = dist[node][i - 1] 
                  + dist[lca[node][i - 1]] 
                        [i - 1]; 
        } 
    } 
  
    for (auto i : graph[node]) { 
        if (i.first == parent) 
            continue; 
        dfs(i.first, node,  
h + 1, i.second); 
    } 
} 

void findDistance(int u, int v) 
{ 
  
    int ans = 0; 
  
   
    if (level[u] > level[v]) 
        swap(u, v); 
  
    for (int i = log - 1; i >= 0; i--) { 
  
        if (lca[v][i] != -1 
            && level[lca[v][i]] 
                   >= level[u]) { 
  
            ans += dist[v][i]; 
            v = lca[v][i]; 
        } 
    } 
  
 
    if (v == u) { 
  
        cout << ans << endl; 
    } 
  
    else { 
    
        for (int i = log - 1; i >= 0; i--) { 
  
            if (lca[v][i] != lca[u][i]) { 
  
              
                ans += dist[u][i] + dist[v][i]; 
  
                v = lca[v][i]; 
                u = lca[u][i]; 
            } 
        } 
  
        
        ans += dist[u][0] + dist[v][0]; 
  
        cout << ans << endl; 
    } 
} 

int main() 
{ 
   
    int n = 5;  
    addEdge(1, 2, 2); 
    addEdge(1, 3, 3); 
    addEdge(2, 4, 5); 
    addEdge(2, 5, 7); 
  
  
    for (int i = 1; i <= n; i++) { 
        for (int j = 0; j < log; j++) { 
            lca[i][j] = -1; 
            dist[i][j] = 0; 
        } 
    } 
  
    dfs(1, -1, 0, 0); 
  
    findDistance(1, 3); 
  
   
    findDistance(2, 3); 
  
    findDistance(3, 5); 
  
    return 0; 
} 

===============================================================================================================================================================

Question 2)

Query to count odd and even parity elements in subarray after XOR with K
Given an array arr[] consisting of N elements and Q queries represented by L, R, and K. The task is to print the count of odd and even parity elements in the subarray [L, R] after Bitwise-XOR with K.

Solution :-

#include <bits/stdc++.h> 
using namespace std; 
  
#define MAX 100000 
  
int block; 
  

struct Query { 
   
    int L, R, K, index; 
  
     
    int odd; 
  
    int even; 
}; 
  

int count_oddP; 
  

bool compare(Query x, Query y) 
{ 
 
    if (x.L / block != y.L / block) 
        return x.L / block < y.L / block; 
  
    return x.R < y.R; 
} 
   
bool compare1(Query x, Query y) 
{ 
    return x.index < y.index; 
} 

void add(int currL, int a[]) 
{ 
    if (__builtin_parity(a[currL])) 
        count_oddP++; 
} 
  
void remove(int currR, int a[]) 
{ 
    if (__builtin_parity(a[currR])) 
        count_oddP--; 
}  
void queryResults(int a[], int n, Query q[], 
                  int m) 
{ 
  
    count_oddP = 0; 
  
    
    block = (int)sqrt(n); 
    sort(q, q + m, compare); 
  
    int currL = 0, currR = 0; 
  
    for (int i = 0; i < m; i++) { 
  

        int L = q[i].L, 
            R = q[i].R, 
            k = q[i].K; 
  

        while (currR <= R) { 
            add(currR, a); 
            currR++; 
        } 
        while (currL > L) { 
            add(currL - 1, a); 
            currL--; 
        } 
  
        
        while (currR > R + 1) 
  
        { 
            remove(currR - 1, a); 
            currR--; 
        } 
        while (currL < L) { 
            remove(currL, a); 
            currL++; 
        } 
  
        if (!__builtin_parity(k)) { 
            q[i].odd = count_oddP; 
            q[i].even 
                = R - L + 1 - count_oddP; 
        } 
        else { 
            q[i].odd 
                = R - L + 1 - count_oddP; 
            q[i].even = count_oddP; 
        } 
    } 
} 
 
void printResults(Query q[], int m) 
{ 
    sort(q, q + m, compare1); 
    for (int i = 0; i < m; i++) { 
        cout << q[i].odd << " "
             << q[i].even << endl; 
    } 
} 
   
int main() 
{ 
  
    int arr[] = { 5, 2, 3, 1, 4, 8, 10 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    Query q[] = { { 0, 5, 3, 0, 0, 0 }, 
                  { 1, 4, 8, 1, 0, 0 }, 
                  { 4, 6, 10, 2, 0, 0 } }; 
  
    int m = sizeof(q) / sizeof(q[0]); 
  
    queryResults(arr, n, q, m); 
  
    printResults(q, m); 
  
    return 0; 
} 

===============================================================================================================================================================

Question 3)

Length of the smallest substring which contains all vowels
Given a string str consisting of only lowercase English alphabets, the task is to find the substring of smallest length which contains all the vowels. If no such substring is found, print -1.

Solution :-

#include <bits/stdc++.h> 
using namespace std; 
  
int findMinLength(string s) 
{ 
    int n = s.size(); 
  
    map<char, int> counts; 
  
    vector<int> indices; 
  
    for (int i = 0; i < n; i++) { 
  
        if (s[i] == 'a' || s[i] == 'e'
            || s[i] == 'o'
            || s[i] == 'i'
            || s[i] == 'u') { 
  
            counts[s[i]]++; 
            indices.push_back(i); 
        } 
    } 
  
    if (counts.size() < 5) 
        return -1; 
  
    int flag1 = 0, flag2 = 0; 
    int i = 0; 
    int j = indices.size() - 1; 
  
    while ((j - i) >= 4) { 
  
        if (!flag1 
            && counts[s[indices[i]]] > 1) { 
  
            counts[s[indices[i]]]--; 
   
            i++; 
        } 
  
        else
            flag1 = 1; 
  
        if (!flag2 
            && counts[s[indices[j]]] > 1) { 
  
            counts[s[indices[j]]]--; 
        
            j--; 
        } 
   
        else
            flag2 = 1; 
  
        if (flag1 && flag2) 
            break; 
    } 
  
    return (indices[j] - indices[i] + 1); 
} 
  
int main() 
{ 
  
    string s = "aaeebbeaccaaoiuooooooooiuu"; 
    cout << findMinLength(s); 
  
    return 0; 
} 

===============================================================================================================================================================

Question 4)

Minimum number of swaps required to make the string K periodic
Given a string S of length N, and an array A, consisting of lowercase letters. Also given a positive integer K. the task is to find the minimum number of swaps required (between S and A) to make string S K periodic.

Solution :-

#include <bits/stdc++.h> 
using namespace std; 
  
int minFlip(string s, int n, 
            int k, char a[], 
            int p) 
{ 
    bool allowed[26] = { 0 }; 
  
    for (int i = 0; i < p; i++) { 
  
        allowed[a[i] - 'a'] = true; 
    } 
    char freq[k][26]; 
  
    for (int i = 0; i < k; i++) 
        for (int j = 0; j < 26; j++) 
            freq[i][j] = 0; 
  
    for (int i = 0; i < n; i++) { 
  
        freq[i % k][s[i] - 'a'] += 1; 
    } 
  
    int ans = 0; 
      int totalpositions = n / k; 
  
    for (int i = 0; i < k; i++) { 
        int maxfrequency = 0; 
  
        for (int j = 0; j < 26; j++) { 
              if (freq[i][j] > maxfrequency 
                and allowed[j] == true) 
                maxfrequency = freq[i][j]; 
        } 
          ans 
            += (totalpositions 
                - maxfrequency 
                + ((i % k < n % k) 
                       ? 1 
                       : 0)); 
    } 
    cout << ans << endl; 
} 
   
int main() 
{ 
    string S = "nihsiakyt"; 
    int n = S.length(); 
  
    int K = 3; 
  
    char A[5] 
        = { 'n', 'i', 'p', 's', 'q' }; 
    int p = sizeof(A) / sizeof(A[0]); 
  
    minFlip(S, n, K, A, p); 
  
    return 0; 
} 

===============================================================================================================================================================

Question 5)

Check if left and right shift of any string results into given string
Given string S consisting of only lowercase English letters. The task is to find if there exists any string which has left shift and right shift both equal to string S. If there exists any string then print Yes, otherwise print No.

Solution :-

#include <bits/stdc++.h> 
using namespace std; 
  
void check_string_exist(string S) 
{ 
    int size = S.length(); 
  
    bool check = true; 
  
    for (int i = 0; i < size; i++) { 
  
        if (S[i] != S[(i + 2) % size]) { 
            check = false; 
            break; 
        } 
    } 
  
    if (check) 
        cout << "Yes" << endl; 
    else
        cout << "No" << endl; 
} 
   
int main() 
{ 
    string S = "papa"; 
  
    check_string_exist(S); 
  
    return 0; 
} 