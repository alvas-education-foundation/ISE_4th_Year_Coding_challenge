Question 1)
Implement a program to construct a Binary Search Tree and also display the elements in the tree using Inorder , Preorder and Postorder traversals.

 Create a structure

 struct tnode {
int data;
struct tnode * leftc;
struct tnode * rightc;
};
 

Binary Search tree is a binary tree in which each internal node x stores an element such that the element stored in the left subtree of x are less than x and elements stored in the right subtree of x are greater than or equal to x. This is called binary-search-tree property.

Solution:-

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct tnode {
	int data;
	struct tnode * leftc;
	struct tnode * rightc;
};

void insert(struct tnode **, int num);
void inorder(struct tnode *);
void preorder(struct tnode *);
void postorder(struct tnode *);

int main() {
	struct tnode * root=NULL;
	char ch[5];
	int num;
	do  {
		printf("Enter the element to be inserted in the tree\n");
		scanf("%d",&num);
		insert(&root, num);
		printf("Do you want to insert another element?\n");
		scanf("%s",ch);
	}while(strcmp(ch,"yes")==0);
	printf("Inorder Traversal : The elements in the tree are");
	inorder(root);
	printf("\n");
	printf("Preorder Traversal : The elements in the tree are");
	preorder(root);
	printf("\n");
	printf("Postorder Traversal : The elements in the tree are");
	postorder(root);
	printf("\n");
	return 0;
}

void insert(struct tnode ** s, int num) {
  if((*s)==NULL)
  {
     (*s)=(struct tnode*)malloc(sizeof(struct tnode));
       (*s)->data=num;
  (*s)->leftc=NULL;
  (*s)->rightc=NULL;
  }
  else
  {
      if(num<(*s)->data)
  {
      insert(&((*s)->leftc),num);
  }
  else
  {
     insert(&((*s)->rightc),num);
  }
    }/*--------Fill your code here--------*/
}

void inorder(struct tnode * s)  {
   if(s==NULL)
   {
       return;
   }
   inorder(s->leftc);
   printf(" %d",s->data);
   inorder(s->rightc);/*--------Fill your code here--------*/
}

void preorder(struct tnode * s) {
    if(s==NULL)
    {
        return;
    }
    printf(" %d",s->data);
    preorder(s->leftc);
    preorder(s->rightc);/*--------Fill your code here--------*/
}

void postorder(struct tnode * s) {
   if(s==NULL)
   {
       return;
   }
   postorder(s->leftc);
   postorder(s->rightc);
   printf(" %d",s->data);
   /*--------Fill your code here--------*/
}

===============================================================================================================================================================

Question 2)

BST - LEVEL ORDERED

Binary Search Tree - Print Level Order
Implement a C program to print the nodes in a BST in level order.
Input and Output Format:

Refer Sample Input and Output for formatting specifications.
Sample Input and Output:
Enter the element to be inserted in the tree
5
Do you want to insert another element?
yes
Enter the element to be inserted in the tree
7
Do you want to insert another element?
yes
Enter the element to be inserted in the tree
3
Do you want to insert another element?
yes
Enter the element to be inserted in the tree
1
Do you want to insert another element?
no
Inorder Traversal : The elements in the tree are 1 3 5 7
The elements in the tree in level order are 5 3 7 1

Solution:-
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

struct tnode
{
	int data;
	struct tnode * leftc;
	struct tnode * rightc;
};

void insert(struct tnode **, int num);
void inorder(struct tnode *);
void printLevelOrder(struct tnode* root);
void printGivenLevel(struct tnode* root, int level);
int height(struct tnode* node);


int main()
{
	struct tnode * root=NULL;
	char ch[5];
	int num;
	do  {
		printf("Enter the element to be inserted in the tree\n");
		scanf("%d",&num);
		insert(&root, num);
		printf("Do you want to insert another element?\n");
		scanf("%s",ch);
	}while(strcmp(ch,"yes")==0);

	printf("Inorder Traversal : The elements in the tree are");
	inorder(root);
	printf("\n");
	printf("The elements in the tree in level order are");
	printLevelOrder(root);
	printf("\n");
	return 0;
}

void insert(struct tnode ** s, int num) {
	if((*s) == NULL) 	{
		(*s) = (struct tnode *) malloc( sizeof (struct tnode));
		(*s)->data = num;
		(*s)->leftc = NULL;
		(*s)->rightc = NULL;
	}
	else 	{
	if(num < (*s)->data)
	  insert(&( (*s)->leftc ), num);
	else
	  insert(&( (*s)->rightc ), num);
	}
}

void inorder(struct tnode * s)  {
	if(s != NULL) 	{
		inorder(s->leftc);
		printf(" %d",s->data);
		inorder(s->rightc);
	}
}

 
/* Function to print level order traversal a tree*/
void printLevelOrder(struct tnode* root)  {
  int h = height(root);
  int i;
  for(i=1; i<=h; i++)
    printGivenLevel(root, i);
}    
 
/* Print nodes at a given level */
void printGivenLevel(struct tnode* root, int level)  {
 
 if(root==NULL)
 return;
 else if(level==1)
 printf(" %d",root->data);
 else
 {
     printGivenLevel(root->leftc,level-1);
     printGivenLevel(root->rightc,level-1);
 }
 /*--------Fill your code here-----------*/
}
 
int height(struct tnode* node) {
   if (node==NULL)
       return 0;
   else    {
     /* compute the height of each subtree */
     int lheight = height(node->leftc);
     int rheight = height(node->rightc);
 
     /* use the larger one */
     if (lheight > rheight)
         return(lheight+1);
     else return(rheight+1);
   }
}

===============================================================================================================================================================

Question 3)

BST - LEAF NODES
Binary Search Tree - Leaf Nodes
Implement C program to find the number of leaf nodes in a BST
Input and Output Format:
Refer Sample Input and Output for formatting specifications.

Solution:-

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct tnode {
	int data;
	struct tnode * leftc;
	struct tnode * rightc;
};

void insert(struct tnode **, int num);
void inorder(struct tnode *);
int getLeafCount(struct tnode* node);

int main() {
	struct tnode * root=NULL;
	char ch[5];
	int num;
	do {
		printf("Enter the element to be inserted in the tree\n");
		scanf("%d",&num);
		insert(&root, num);
		printf("Do you want to insert another element?\n");
		scanf("%s",ch);
	}while(strcmp(ch,"yes")==0);

	printf("The elements in the tree are");
	inorder(root);
	printf("\n");
	printf("The number of leaf nodes in the tree is %d\n",getLeafCount(root));
	return 0;
}

void insert(struct tnode ** s, int num) {
	if((*s) == NULL) {
		(*s) = (struct tnode *) malloc( sizeof (struct tnode));
		(*s)->data = num;
		(*s)->leftc = NULL;
		(*s)->rightc = NULL;
	}
	else 	{
		if(num < (*s)->data)
		  insert(&( (*s)->leftc ), num);
		else
		  insert(&( (*s)->rightc ), num);
	}
}

void inorder(struct tnode * s) {
    if(s==NULL)
    return;
    inorder(s->leftc);
    printf(" %d",s->data);
    inorder(s->rightc);/*----------Fill your code here-----------*/
}

int getLeafCount(struct tnode* node) {
   if(node==NULL)
   {
       return 0;
   }/*----------Fill your code here-----------*/
    if(node->rightc==NULL&&node->leftc==NULL)
    return 1;
    else
    return getLeafCount(node->leftc)+getLeafCount(node->rightc);
    
}

===============================================================================================================================================================

Question 4)

BST - SIZE
Binary Search Tree - Size

 

Implement a C program to find the size of the BST.

 

Input and Output Format:
Refer Sample Input and Output for formatting specifications. 
[All text in bold corresponds to input and the rest corresponds to output]
Sample Input and Output:
Enter the element to be inserted in the tree
5
Do you want to insert another element?
yes
Enter the element to be inserted in the tree
7
Do you want to insert another element?
yes
Enter the element to be inserted in the tree
3
Do you want to insert another element?
yes
Enter the element to be inserted in the tree
1
Do you want to insert another element?
no
The elements in the tree are 1 3 5 7
The size of the tree is 4

Solution:-

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int count=0;
struct tnode
{
	int data;
	struct tnode * leftc;
	struct tnode * rightc;
};

void insert(struct tnode **, int num);
void inorder(struct tnode *);
int findSize(struct tnode *);

int main() {
	struct tnode * root=NULL;
	char ch[5];
	int num;
	do {
		printf("Enter the element to be inserted in the tree\n");
		scanf("%d",&num);
		insert(&root, num);
		printf("Do you want to insert another element?\n");
		scanf("%s",ch);
	}while(strcmp(ch,"yes")==0);

	printf("The elements in the tree are");
	inorder(root);
	printf("\n");
	printf("The size of the tree is %d\n",findSize(root));
	return 0;
}

void insert(struct tnode ** s, int num) {
	if((*s) == NULL) {
		(*s) = (struct tnode *) malloc( sizeof (struct tnode));
		(*s)->data = num;
		(*s)->leftc = NULL;
		(*s)->rightc = NULL;
	}
	else 	{
		if(num < (*s)->data)
		  insert(&( (*s)->leftc ), num);
		else
		  insert(&( (*s)->rightc ), num);
	}
}

void inorder(struct tnode * s) {
    if(s==NULL)
    return;
    inorder(s->leftc);
    count++;
    printf(" %d",s->data);
    inorder(s->rightc);
    /*----------Fill your code here-----------*/
}

int findSize(struct tnode * s) {
    return count;
    /*----------Fill your code here-----------*/
}

===============================================================================================================================================================


Question 5)

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution:-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* new1(int val)
{
    struct ListNode* new11=(struct ListNode*)malloc(sizeof(struct ListNode));
    new11->val=val;
    new11->next=NULL;
    return new11;
}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode* l3=NULL;
    struct ListNode *temp,*prev=NULL;
    int sum=0,c=0;
    while(l1!=NULL || l2!=NULL)
    {
        sum=(l1?l1->val:0) + (l2?l2->val:0) + c;
        c=(sum>=10)?1:0;
               sum=sum%10; 
               temp=new1(sum);
        if(l3==NULL)
        {
            l3=temp;
        }
        else
            prev->next=temp;
            prev=temp;
          if(l1)
              l1=l1->next;
            if(l2)
                l2=l2->next;
        }
    if(c>0)
        temp->next=new1(c);

           return l3; 
        }
    
 

